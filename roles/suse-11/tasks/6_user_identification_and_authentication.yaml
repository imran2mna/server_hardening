---

############################
# Secure Authentication 
############################

# inittab
  - name: Verify single user mode in inittab
    shell: 'grep "~~:S:respawn:/sbin/sulogin" /etc/inittab'
    register: presence01
    ignore_errors: true


  - name: Confirm single user mode in inittab
    debug:
      msg: "Single user mode is enabled in inittab"
    when: presence01.rc == 0


  - name: Configure single user mode in inittab
    lineinfile:
      path: /etc/inittab
      regexp: '^~~:S:respawn.*'
      line: ~~:S:respawn:/sbin/sulogin
      state: present
    when: presence01.rc != 0
    register: config01


# host based authentication on SSH
  - name: Verify host based authentication is disabled on SSH
    shell: sshd -T | grep hostbasedauthentication | grep no
    register: auth01
    ignore_errors: true


  - name: Confirm host based authentication is disabled on SSH
    debug:
      msg: "Host based authentication is disabled on SSH"
    when: auth01.rc == 0


  - name: Disable host based authentication on SSH
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*HostbasedAuthentication\s+[yes|no]'
      line: HostbasedAuthentication no
      state: present
    when: auth01.rc != 0
    register: sshconfig01


####################
# Account Password
###################

# password creation requirements
  - name: Ensure password creation requirements
    lineinfile:
      path: /etc/pam.d/common-password
      line: password requisite pam_cracklib.so try_first_pass retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1
      state: present



# minimum user password days
  - name: Verify minimum user password days
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/login.defs PASS_MIN_DAYS {{ password_min_day }}"
    register: password01
    ignore_errors: true


  - name: Confirm minimum user password days
    debug:
      msg: "Minimum user password days is configured in /etc/login.defs"
    when: password01.rc == 0


  - name: Configure minimum user password days
    lineinfile:
      path: /etc/login.defs
      regexp: '[#|\s]*PASS_MIN_DAYS[\s|\t]+[0-9]*'
      line: "PASS_MIN_DAYS {{ password_min_day }}"
      state: present
    when: password01.rc != 0
    register: passconfig01


  - name: Apply minimum user password days to existing user accounts
    shell: "{{ scripts_dir }}/useraccount_chage_min_days.sh {{ password_min_day }}"


  - name: Verify password change on past days
    shell: "{{ scripts_dir }}/password_change_date_verify.sh"
    register: passwdverify01
    ignore_errors: true



# minimum expiration warning days

  - name: Verify minimum password warning days
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/login.defs PASS_WARN_AGE  {{ password_warn_day }}"
    register: password02
    ignore_errors: true


  - name: Confirm minimum user password warning days
    debug:
      msg: "Minimum user password warning days is configured in /etc/login.defs"
    when: password02.rc == 0


  - name: Configure minimum password warning days
    lineinfile:
      path: /etc/login.defs
      regexp: '[#|\s]*PASS_WARN_AGE[\s|\t]+[0-9]*'
      line: "PASS_WARN_AGE {{ password_warn_day }}"
      state: present
    when: password02.rc != 0
    register: passconfig02


  - name: Apply minimum warn days to existing user accounts
    shell: "{{ scripts_dir }}/useraccount_chage_warn_days.sh {{ password_warn_day }}"


  - name: Apply inactive days for accounts
    shell: "{{ scripts_dir }}/useraccount_inactive_days.sh {{ account_inactive_days }}"


#empty password

  - name: Verify empty password blocking on SSH
    shell: sshd -T | grep permitemptypasswords | grep no
    register: auth02
    ignore_errors: true
    tags:
      - always

  - name: Confirm empty password blocking on SSH
    debug:
      msg: "Empty password is blocked on SSH"
    when: auth02.rc == 0


  - name: Configure empty password blocking on SSH
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*PermitEmptyPasswords\s+[yes|no]'
      line: PermitEmptyPasswords no
      state: present
    when: auth02.rc != 0
    register: sshconfig02


# Client-alive interval on SSH 
  - name: Verify client alive interval on SSH
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/ssh/sshd_config ClientAliveInterval  {{ client_alive_interval }}"
    register: auth03
    ignore_errors: true


  - name: Confirm client alive interval on SSH
    debug:
      msg: "Client alive interval is configured on SSH"
    when: auth03.rc == 0


  - name: Configure client alive interval on SSH 
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*ClientAliveInterval[\s|\t]+[0-9]*'
      line: "ClientAliveInterval  {{ client_alive_interval }}"
      state: present
    when: auth03.rc != 0
    register: sshconfig03 


# Client-alive count max on SSH 
  - name: Verify client-alive count max on SSH
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/ssh/sshd_config ClientAliveCountMax  {{ client_alive_count }}"
    register: auth04
    ignore_errors: true


  - name: Confirm client-alive count max on SSH
    debug:
      msg: "Client-alive count max is configured on SSH"
    when: auth04.rc == 0


  - name: Configure client-alive count max on SSH 
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*ClientAliveCountMax[\s|\t]+[0-9]*'
      line: "ClientAliveCountMax  {{ client_alive_count }}"
      state: present
    when: auth04.rc != 0
    register: sshconfig04 


  - name: Reload the SSH service with configuration
    service:
      state: reloaded
      name: sshd
    when: sshconfig01.changed or sshconfig02.changed or sshconfig03.changed or sshconfig04.changed 

