---

############################
# Secure Authentication 
############################

# rescue service
  - name: Verify single user mode in resuce.service
    shell: 'grep /systemd-sulogin-shell /usr/lib/systemd/system/rescue.service'
    register: presence01
    ignore_errors: true

  - name: Confirm single user mode in rescue.service
    debug:
      msg: "Single user mode is enabled in resuce.service"
    when: presence01.rc == 0

  - name: Configure single user mode in rescue.service
    lineinfile:
      path: /usr/lib/systemd/system/rescue.service
      regexp: '^ExecStart='
      line: ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue
      state: present
    when: presence01.rc != 0
    register: config01

# emergency service
  - name: Verify single user mode in emergency.service
    shell: 'grep /systemd-sulogin-shell /usr/lib/systemd/system/emergency.service'
    ignore_errors: true
    register: presence02

  - name: Confirm single user mode in emergency.service
    debug:
      msg: "Single user mode is enabled in emergency.service"
    when: presence02.rc == 0

  - name: Configure single user mode in emergency.service
    lineinfile:
      path: /usr/lib/systemd/system/emergency.service
      regexp: '^ExecStart='
      line: ExecStart=-/usr/lib/systemd/systemd-sulogin-shell emergency
      state: present
    when: presence02.rc != 0
    register: config02

# systemd daemon-reload
  - name: Reload systemd daemon configuration
    shell: systemctl daemon-reload
    when: config01.changed or config02.changed


# host based authentication on SSH
  - name: Verify host based authentication is disabled on SSH
    shell: sshd -T | grep hostbasedauthentication | grep no
    register: auth01
    ignore_errors: true


  - name: Confirm host based authentication is disabled on SSH
    debug:
      msg: "Host based authentication is disabled on SSH"
    when: auth01.rc == 0

  - name: Disable host based authentication on SSH
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*HostbasedAuthentication\s+[yes|no]'
      line: HostbasedAuthentication no
      state: present
    when: auth01.rc != 0
    register: sshconfig01

# Enabling bootloader password
  - name: Inject grub password script
    copy:
      src: custom_scripts/custom-grub-password
      dest: /usr/bin
      mode: 'u+x'
      owner: root
      group: root


####################
# Account Password
###################

# password creation requirements 
# minlen
  - name: Verify minlen in pwquality.conf
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/security/pwquality.conf minlen {{ password_minlen }} ="
    ignore_errors: true
    register: minlen01


  - name: Confirm minlen in pwquality.conf
    debug:
      msg: "Minimum length is configured in pwquality.conf"
    when: minlen01.rc == 0


  - name: Configure minlen in pwquality.conf 
    lineinfile:
      path: /etc/security/pwquality.conf
      regexp: '[#|\s]*minlen[\s|\t]+=[\s|\t]+[0-9]*'
      line: "minlen = {{ password_minlen }}"
      state: present
    when: minlen01.rc != 0
    register: minlenconfig01


# minclass
  - name: Verify minclass in pwquality.conf
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/security/pwquality.conf minclass {{ password_minclass }} ="
    ignore_errors: true
    register: minclass01

  - name: Confirm minclass in pwquality.conf
    debug:
      msg: "Minimum class is configured in pwquality.conf"
    when: minclass01.rc == 0


  - name: Configure minclass in pwquality.conf 
    lineinfile:
      path: /etc/security/pwquality.conf
      regexp: '[#|\s]*minclass[\s|\t]+=[\s|\t]+[0-9]*'
      line: "minclass = {{ password_minclass }}"
      state: present
    when: minclass01.rc != 0
    register: minclsconfig01



  - name: Update the system-auth and password-auth files
    shell: "{{ scripts_dir }}/auth-changer.sh"
    # we need to modify scripts further
    ignore_errors: true


# minimum user password days
  - name: Verify minimum user password days
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/login.defs PASS_MIN_DAYS {{ password_min_day }}"
    register: password01
    ignore_errors: true

  - name: Confirm minimum user password days
    debug:
      msg: "Minimum user password days is configured in /etc/login.defs"
    when: password01.rc == 0


  - name: Configure minimum user password days
    lineinfile:
      path: /etc/login.defs
      regexp: '[#|\s]*PASS_MIN_DAYS[\s|\t]+[0-9]*'
      line: "PASS_MIN_DAYS {{ password_min_day }}"
      state: present
    when: password01.rc != 0
    register: passconfig01

  - name: Apply minimum user password days to existing user accounts
    shell: "{{ scripts_dir }}/useraccount_chage_min_days.sh {{ password_min_day }}"


  - name: Verify password change on past days
    shell: "{{ scripts_dir }}/password_change_date_verify.sh"
    register: passwdverify01
    ignore_errors: true

#     - name: Display password change not applied account
#       debug:
#         var: passwdverify01



# minimum expiration warning days
  - name: Verify minimum password warning days
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/login.defs PASS_WARN_AGE  {{ password_warn_day }}"
    register: password02
    ignore_errors: true

  - name: Confirm minimum user password warning days
    debug:
      msg: "Minimum user password warning days is configured in /etc/login.defs"
    when: password02.rc == 0


  - name: Configure minimum password warning days
    lineinfile:
      path: /etc/login.defs
      regexp: '[#|\s]*PASS_WARN_AGE[\s|\t]+[0-9]*'
      line: "PASS_WARN_AGE {{ password_warn_day }}"
      state: present
    when: password02.rc != 0
    register: passconfig02

  - name: Apply minimum warn days to existing user accounts
    shell: "{{ scripts_dir }}/useraccount_chage_warn_days.sh {{ password_warn_day }}"

  - name: Apply inactive days for accounts
    shell: "{{ scripts_dir }}/useraccount_inactive_days.sh {{ account_inactive_days }}"


#empty password
  - name: Verify empty password blocking on SSH
    shell: sshd -T | grep permitemptypasswords | grep no
    register: auth02
    ignore_errors: true

  - name: Confirm empty password blocking on SSH
    debug:
      msg: "Empty password is blocked on SSH"
    when: auth02.rc == 0


  - name: Configure empty password blocking on SSH
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*PermitEmptyPasswords\s+[yes|no]'
      line: PermitEmptyPasswords no
      state: present
    when: auth02.rc != 0
    register: sshconfig02


# Client-alive interval on SSH 
  - name: Verify client alive interval on SSH
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/ssh/sshd_config ClientAliveInterval  {{ client_alive_interval }}"
    register: auth03
    ignore_errors: true

  - name: Confirm client alive interval on SSH
    debug:
      msg: "Client alive interval is configured on SSH"
    when: auth03.rc == 0


  - name: Configure client alive interval on SSH 
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*ClientAliveInterval[\s|\t]+[0-9]*'
      line: "ClientAliveInterval  {{ client_alive_interval }}"
      state: present
    when: auth03.rc != 0
    register: sshconfig03 


# Client-alive count max on SSH 
  - name: Verify client-alive count max on SSH
    shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/ssh/sshd_config ClientAliveCountMax  {{ client_alive_count }}"
    register: auth04
    ignore_errors: true

  - name: Confirm client-alive count max on SSH
    debug:
      msg: "Client-alive count max is configured on SSH"
    when: auth04.rc == 0


  - name: Configure client-alive count max on SSH 
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '[#|\s]*ClientAliveCountMax[\s|\t]+[0-9]*'
      line: "ClientAliveCountMax  {{ client_alive_count }}"
      state: present
    when: auth04.rc != 0
    register: sshconfig04 

  - name: Reload the SSH service with configuration
    systemd:
      state: reloaded
      name: sshd
    when: sshconfig01.changed or sshconfig02.changed or sshconfig03.changed or sshconfig04.changed 

