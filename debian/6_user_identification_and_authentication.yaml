---

  - name: User Identification and Authentication
    hosts: all
    gather_facts: false
    become: true
    become_user: root
    vars:
      password_min_day: 7
      password_warn_day: 7
      account_inactive_days: 30
      password_minlen: 14
      password_minclass: 4
      client_alive_interval: 300
      client_alive_count: 0
      scripts_dir: /opt/scripts
    tasks:

      - name: Gather Information
        setup:
        register: info
        tags:
          - always

############################
# Secure Authentication 
############################

# rescue service
      - name: Verify single user mode in resuce.service
        shell: 'grep /systemd-sulogin-shell /usr/lib/systemd/system/rescue.service'
        register: presence01
        ignore_errors: true
        tags:
          - always

      - name: Confirm single user mode in rescue.service
        debug:
          msg: "Single user mode is enabled in resuce.service"
        when: presence01.rc == 0
        tags:
          - always

      - name: Configure single user mode in rescue.service
        lineinfile:
          path: /usr/lib/systemd/system/rescue.service
          regexp: '^ExecStart='
          line: ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue
          state: present
        when: presence01.rc != 0
        register: config01
        tags:
          - never
          - configuration

# emergency service
      - name: Verify single user mode in emergency.service
        shell: 'grep /systemd-sulogin-shell /usr/lib/systemd/system/emergency.service'
        ignore_errors: true
        register: presence02
        tags:
          - always

      - name: Confirm single user mode in emergency.service
        debug:
          msg: "Single user mode is enabled in emergency.service"
        when: presence02.rc == 0
        tags:
          - always

      - name: Configure single user mode in emergency.service
        lineinfile:
          path: /usr/lib/systemd/system/emergency.service
          regexp: '^ExecStart='
          line: ExecStart=-/usr/lib/systemd/systemd-sulogin-shell emergency
          state: present
        when: presence02.rc != 0
        register: config02
        tags:
          - never
          - configuration

# systemd daemon-reload
      - name: Reload systemd daemon configuration
        shell: systemctl daemon-reload
        when: config01.changed or config02.changed
        tags:
          - never
          - configuration


# host based authentication on SSH
      - name: Verify host based authentication is disabled on SSH
        shell: sshd -T | grep hostbasedauthentication | grep no
        register: auth01
        ignore_errors: true
        tags:
          - always


      - name: Confirm host based authentication is disabled on SSH
        debug:
          msg: "Host based authentication is disabled on SSH"
        when: auth01.rc == 0
        tags:
          - always

      - name: Disable host based authentication on SSH
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: '[#|\s]*HostbasedAuthentication\s+[yes|no]'
          line: HostbasedAuthentication no
          state: present
        when: auth01.rc != 0
        register: sshconfig01
        tags:
          - never
          - configuration

# Enabling bootloader password
      - name: Inject grub password script
        copy:
          src: custom_scripts/custom-grub-password
          dest: /usr/bin
          mode: 'u+x'
          owner: root
          group: root
        tags:
          - never
          - configuration


####################
# Account Password
###################

# password creation requirements 
# minlen
      - name: Verify minlen in pwquality.conf
        shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/security/pwquality.conf minlen {{ password_minlen }} ="
        ignore_errors: true
        register: minlen01
        tags:
          - always


      - name: Confirm minlen in pwquality.conf
        debug:
          msg: "Minimum length is configured in pwquality.conf"
        when: minlen01.rc == 0
        tags:
          - always


      - name: Configure minlen in pwquality.conf 
        lineinfile:
          path: /etc/security/pwquality.conf
          regexp: '[#|\s]*minlen[\s|\t]+=[\s|\t]+[0-9]*'
          line: "minlen = {{ password_minlen }}"
          state: present
        when: minlen01.rc != 0
        register: minlenconfig01
        tags:
          - never
          - configuration


# minclass
      - name: Verify minclass in pwquality.conf
        shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/security/pwquality.conf minclass {{ password_minclass }} ="
        ignore_errors: true
        register: minclass01
        tags:
          - always

      - name: Confirm minclass in pwquality.conf
        debug:
          msg: "Minimum class is configured in pwquality.conf"
        when: minclass01.rc == 0
        tags:
          - always


      - name: Configure minclass in pwquality.conf 
        lineinfile:
          path: /etc/security/pwquality.conf
          regexp: '[#|\s]*minclass[\s|\t]+=[\s|\t]+[0-9]*'
          line: "minclass = {{ password_minclass }}"
          state: present
        when: minclass01.rc != 0
        register: minclsconfig01
        tags:
          - never
          - configuration



      - name: Update the system-auth and password-auth files
        shell: "{{ scripts_dir }}/auth-changer.sh"
        # we need to modify scripts further
        ignore_errors: true
        tags:
          - never
          - recommend


# minimum user password days
      - name: Verify minimum user password days
        shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/login.defs PASS_MIN_DAYS {{ password_min_day }}"
        register: password01
        ignore_errors: true
        tags:
          - always

      - name: Confirm minimum user password days
        debug:
          msg: "Minimum user password days is configured in /etc/login.defs"
        when: password01.rc == 0
        tags:
          - always


      - name: Configure minimum user password days
        lineinfile:
          path: /etc/login.defs
          regexp: '[#|\s]*PASS_MIN_DAYS[\s|\t]+[0-9]*'
          line: "PASS_MIN_DAYS {{ password_min_day }}"
          state: present
        when: password01.rc != 0
        register: passconfig01
        tags:
          - never
          - configuration

      - name: Apply minimum user password days to existing user accounts
        shell: "{{ scripts_dir }}/useraccount_chage_min_days.sh {{ password_min_day }}"
        tags:
          - never
          - configuration

    
      - name: Verify password change on past days
        shell: "{{ scripts_dir }}/password_change_date_verify.sh"
        register: passwdverify01
        ignore_errors: true
        tags:
          - always

#     - name: Display password change not applied account
#       debug:
#         var: passwdverify01



# minimum expiration warning days
      - name: Verify minimum password warning days
        shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/login.defs PASS_WARN_AGE  {{ password_warn_day }}"
        register: password02
        ignore_errors: true
        tags:
          - always

      - name: Confirm minimum user password warning days
        debug:
          msg: "Minimum user password warning days is configured in /etc/login.defs"
        when: password02.rc == 0
        tags:
          - always


      - name: Configure minimum password warning days
        lineinfile:
          path: /etc/login.defs
          regexp: '[#|\s]*PASS_WARN_AGE[\s|\t]+[0-9]*'
          line: "PASS_WARN_AGE {{ password_warn_day }}"
          state: present
        when: password02.rc != 0
        register: passconfig02
        tags:
          - never
          - configuration

      - name: Apply minimum warn days to existing user accounts
        shell: "{{ scripts_dir }}/useraccount_chage_warn_days.sh {{ password_warn_day }}"
        tags:
          - never
          - configuration

      - name: Apply inactive days for accounts
        shell: "{{ scripts_dir }}/useraccount_inactive_days.sh {{ account_inactive_days }}"
        tags:
          - never
          - configuration


#empty password
      - name: Verify empty password blocking on SSH
        shell: sshd -T | grep permitemptypasswords | grep no
        register: auth02
        ignore_errors: true
        tags:
          - always

      - name: Confirm empty password blocking on SSH
        debug:
          msg: "Empty password is blocked on SSH"
        when: auth02.rc == 0
        tags:
          - always


      - name: Configure empty password blocking on SSH
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: '[#|\s]*PermitEmptyPasswords\s+[yes|no]'
          line: PermitEmptyPasswords no
          state: present
        when: auth02.rc != 0
        register: sshconfig02
        tags:
          - never
          - configuration


# Client-alive interval on SSH 
      - name: Verify client alive interval on SSH
        shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/ssh/sshd_config ClientAliveInterval  {{ client_alive_interval }}"
        register: auth03
        ignore_errors: true
        tags:
          - always

      - name: Confirm client alive interval on SSH
        debug:
          msg: "Client alive interval is configured on SSH"
        when: auth03.rc == 0
        tags:
          - always


      - name: Configure client alive interval on SSH 
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: '[#|\s]*ClientAliveInterval[\s|\t]+[0-9]*'
          line: "ClientAliveInterval  {{ client_alive_interval }}"
          state: present
        when: auth03.rc != 0
        register: sshconfig03 
        tags:
          - never
          - configuration


# Client-alive count max on SSH 
      - name: Verify client-alive count max on SSH
        shell: "{{ info.ansible_facts.ansible_python.executable }} {{ scripts_dir }}/min_days_verfication.py /etc/ssh/sshd_config ClientAliveCountMax  {{ client_alive_count }}"
        register: auth04
        ignore_errors: true
        tags:
          - always

      - name: Confirm client-alive count max on SSH
        debug:
          msg: "Client-alive count max is configured on SSH"
        when: auth04.rc == 0
        tags:
          - always


      - name: Configure client-alive count max on SSH 
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: '[#|\s]*ClientAliveCountMax[\s|\t]+[0-9]*'
          line: "ClientAliveCountMax  {{ client_alive_count }}"
          state: present
        when: auth04.rc != 0
        register: sshconfig04 
        tags:
          - never
          - configuration

      - name: Reload the SSH service with configuration
        systemd:
          state: restarted
          name: sshd
        when: sshconfig01.changed or sshconfig02.changed or sshconfig03.changed or sshconfig04.changed 
        tags:
          - never
          - configuration

